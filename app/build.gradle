apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'play'
apply plugin: 'spoon'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

buildscript {

    repositories {
        mavenCentral()
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'com.github.triplet.gradle:play-publisher:1.0.2'
        classpath 'io.fabric.tools:gradle:1.+'
        classpath 'com.stanfy.spoon:spoon-gradle-plugin:1.0.2'
    }
}

android {
    lintOptions {
        abortOnError false
    }
    signingConfigs {
        release
    }
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    defaultConfig {
        applicationId "com.sregg.android.tv.spotifyPlayer"
        minSdkVersion 17
        targetSdkVersion 23
        renderscriptTargetApi 17
        renderscriptSupportModeEnabled true
        versionCode 1
        versionName "1.0"

        // runner for espresso
        testInstrumentationRunner "com.sregg.android.tv.spotifyPlayer.testUtils.RxAndroidJUnitRunner"
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    repositories {
        mavenCentral()
        flatDir {
            dirs 'libs'
        }
    }
}

def androidSupportVersion = '23.0.1'

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // support libraries
    compile "com.android.support:recyclerview-v7:${androidSupportVersion}"
    compile "com.android.support:leanback-v17:${androidSupportVersion}"
    compile "com.android.support:appcompat-v7:${androidSupportVersion}"
    compile "com.android.support:palette-v7:${androidSupportVersion}"

    // rx
    compile 'io.reactivex:rxjava:1.0.14'
    compile 'io.reactivex:rxandroid:1.0.1'

    // spotify
    compile 'com.spotify.sdk:spotify-player:1.0.0-beta11@aar'
    compile 'com.spotify.sdk:spotify-auth:1.0.0-beta11@aar'
    compile project(':spotify-api')

    // retrofit okhttp
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'com.squareup.okhttp:okhttp:2.4.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.4.0'

    compile 'com.squareup.picasso:picasso:2.4.0'
    compile 'com.squareup:otto:1.3.6'
    compile 'com.joanzapata.android:android-iconify:1.0.9'
    compile 'de.u-mass:lastfm-java:0.1.2'
    compile('com.crashlytics.sdk.android:crashlytics:2.5.1@aar') {
        transitive = true;
    }

    // testing
    androidTestCompile 'com.android.support.test:runner:0.3'
    androidTestCompile 'com.android.support.test:rules:0.3'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2'
    androidTestCompile 'com.android.support.test.espresso:espresso-contrib:2.2'
    androidTestCompile 'com.android.support.test.espresso:espresso-intents:2.2'
    androidTestCompile 'com.squareup.spoon:spoon-client:1.1.9'
    androidTestCompile 'com.squareup.okhttp:mockwebserver:2.4.0'
}

configurations {
    androidTestCompile.exclude group: 'com.android.support', module: 'support-v4'
    androidTestCompile.exclude group: 'com.android.support', module: 'recyclerview-v7'
    androidTestCompile.exclude group: 'com.android.support', module: 'support-annotations'
}

spoon {
    debug = true;
}

play {
    serviceAccountEmail = '724462887271-bk4vi27q9qk9h4g3mideokj3e0bqe3ng@developer.gserviceaccount.com'
    pk12File = file('/Users/simonreggiani/dev/keys/Google_Play_Android_Developer-0bc22be971a2.p12')
}

Properties releaseProperties = new Properties()
if (project.rootProject.file('release.properties').exists()) {
    releaseProperties.load(project.rootProject.file('release.properties').newDataInputStream())
    if (releaseProperties.getProperty('storeFile') &&
            releaseProperties.getProperty('storePassword') &&
            releaseProperties.getProperty('keyAlias') &&
            releaseProperties.getProperty('keyPassword')) {
        android.signingConfigs.release.storeFile = file(releaseProperties.getProperty('storeFile'))
        android.signingConfigs.release.storePassword = releaseProperties.getProperty('storePassword')
        android.signingConfigs.release.keyAlias = releaseProperties.getProperty('keyAlias')
        android.signingConfigs.release.keyPassword = releaseProperties.getProperty('keyPassword')
    } else {
        project.logger.warn('WARN: Set the values storeFile, storePassword, keyAlias, and keyPassword in release.properties to sign the release.')
        android.buildTypes.release.signingConfig = null
    }
} else {
    project.logger.warn('WARN: Set the values storeFile, storePassword, keyAlias, and keyPassword in release.properties to sign the release.')
    android.buildTypes.release.signingConfig = null
}
